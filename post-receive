#!/usr/bin/env ruby

@repo_location = "/the/actual/repo/location"
@repo_path = "git://the.repo.path.configured.in.reviewboard"
@reviewboard_url = "http://url.to.your.reviewboard.com"
@reviewboard_username = 'user'
@reviewboard_password = 'password'
@reviewboard_target_groups = ['taco', 'shrimp']
# list of author emails and their corresponding username in reviewboard.
# for simplicity, make sure the email is in lower case.
@authors = {
  "author@example.com" => "author",
  }

# Set the working directory to make sure deployed bundles work ($PWD contains ~ when using git+ssh://)
Dir.chdir @repo_location + "hooks/"

require 'rubygems'
require 'bundler/setup'

require 'grit'
require 'rest_client'
require 'json'

include Grit


# monkey patch Tempfile to return "diff" as the original_filename
class Tempfile
  def original_filename
    "diff"
  end
end

def parse_author(author)
  @authors[author.email.downcase]
end

def post_review
  # we don't care about tags
  return unless @ref_type == "heads"

  @repo.commits_between(@old_rev, @new_rev).each do |commit|
    submit_as = parse_author(commit.author)
    # if we don't know the author, we don't want to post a review. This is to support merges in the kernel trees for instance.
    return unless submit_as

    # set up a resource
    reviewboard = RestClient::Resource.new(@reviewboard_url, :user => @reviewboard_username, :password => @reviewboard_password, :headers => { :accept => 'application/json', :accept_encoding => ''})
    api = reviewboard['api/']
    review_requests = api['review-requests/']

    # create a new review request
    parsed = JSON.parse review_requests.post :multipart => true, :repository => @repo_path, :submit_as => submit_as
    return unless parsed["review_request"]["id"]

    our_id = parsed["review_request"]["id"]
    review = review_requests["#{our_id}/"]

    review_draft = review['draft/']
    # update the draft with the information on hand
    parsed = JSON.parse review_draft.put :multipart => true, :target_groups => @reviewboard_target_groups.join(','), :summary => commit.short_message, :description => commit.message
    return unless parsed["stat"] == "ok"

    review_diffs = review['diffs/']
    diff_file = Tempfile.new('diff')
    begin
      # don't use Grit::Diff as we need the unmodified diff output anyway
      diff_file.write @repo.git.native('diff', {:full_index => true}, commit.parents.first.id, commit.id)
      diff_file.rewind

      # use the file variant of the multipart class, since reviewboard did not work with just "path".
      parsed = JSON.parse review_diffs.post :multipart => true, "path" => diff_file
      return unless parsed["stat"] == "ok"
    ensure
      diff_file.close
      diff_file.unlink
    end

    # publish the review.
    parsed = JSON.parse review_draft.put :multipart => true, :public => 1
    return unless parsed["stat"] == "ok"

    p "Posted review #{our_id}."
  end
end

@repo = Repo.new(@repo_location)

# read the parameters from stdin
stdins = []; stdins << $_ while gets

stdins.each do |str|
  arr = str.split
  refs = arr[2].split('/')

  @old_rev = arr[0]
  @new_rev = arr[1]
  @ref_type = refs[1]
  @ref_name = refs[2]

  post_review
end

